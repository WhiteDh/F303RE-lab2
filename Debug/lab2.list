
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000313c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080032d0  080032d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003398  08003398  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003398  08003398  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800339c  0800339c  0000439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080033a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          0000018c  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5a8  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aec  00000000  00000000  000125f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  000140e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e3  00000000  00000000  00014c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd0a  00000000  00000000  0001550b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e33c  00000000  00000000  00035215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c61df  00000000  00000000  00043551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109730  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f2c  00000000  00000000  00109774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080032b8 	.word	0x080032b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	080032b8 	.word	0x080032b8

080001d4 <LED_Init>:

UART_HandleTypeDef huart2;
TIM_HandleTypeDef htim2, htim3;
TIM_HandleTypeDef htim4;

void LED_Init(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ea:	4b26      	ldr	r3, [pc, #152]	@ (8000284 <LED_Init+0xb0>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a25      	ldr	r2, [pc, #148]	@ (8000284 <LED_Init+0xb0>)
 80001f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b23      	ldr	r3, [pc, #140]	@ (8000284 <LED_Init+0xb0>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001fe:	60bb      	str	r3, [r7, #8]
 8000200:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000202:	4b20      	ldr	r3, [pc, #128]	@ (8000284 <LED_Init+0xb0>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a1f      	ldr	r2, [pc, #124]	@ (8000284 <LED_Init+0xb0>)
 8000208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b1d      	ldr	r3, [pc, #116]	@ (8000284 <LED_Init+0xb0>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800021a:	2302      	movs	r3, #2
 800021c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000226:	2320      	movs	r3, #32
 8000228:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800022a:	2301      	movs	r3, #1
 800022c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022e:	f107 030c 	add.w	r3, r7, #12
 8000232:	4619      	mov	r1, r3
 8000234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000238:	f000 fdc8 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800023c:	2308      	movs	r3, #8
 800023e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000240:	2301      	movs	r3, #1
 8000242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4619      	mov	r1, r3
 800024a:	480f      	ldr	r0, [pc, #60]	@ (8000288 <LED_Init+0xb4>)
 800024c:	f000 fdbe 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000250:	2310      	movs	r3, #16
 8000252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000254:	2302      	movs	r3, #2
 8000256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4619      	mov	r1, r3
 800025e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000262:	f000 fdb3 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000266:	2301      	movs	r3, #1
 8000268:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800026a:	2302      	movs	r3, #2
 800026c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026e:	f107 030c 	add.w	r3, r7, #12
 8000272:	4619      	mov	r1, r3
 8000274:	4804      	ldr	r0, [pc, #16]	@ (8000288 <LED_Init+0xb4>)
 8000276:	f000 fda9 	bl	8000dcc <HAL_GPIO_Init>
}
 800027a:	bf00      	nop
 800027c:	3720      	adds	r7, #32
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000
 8000288:	48000400 	.word	0x48000400

0800028c <PWM_Init>:

void PWM_Init(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b08a      	sub	sp, #40	@ 0x28
 8000290:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
 80002a2:	615a      	str	r2, [r3, #20]
 80002a4:	619a      	str	r2, [r3, #24]

    __HAL_RCC_TIM2_CLK_ENABLE();
 80002a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000398 <PWM_Init+0x10c>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000398 <PWM_Init+0x10c>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	61d3      	str	r3, [r2, #28]
 80002b2:	4b39      	ldr	r3, [pc, #228]	@ (8000398 <PWM_Init+0x10c>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
    htim2.Instance = TIM2;
 80002be:	4b37      	ldr	r3, [pc, #220]	@ (800039c <PWM_Init+0x110>)
 80002c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c4:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 1599;
 80002c6:	4b35      	ldr	r3, [pc, #212]	@ (800039c <PWM_Init+0x110>)
 80002c8:	f240 623f 	movw	r2, #1599	@ 0x63f
 80002cc:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b33      	ldr	r3, [pc, #204]	@ (800039c <PWM_Init+0x110>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = MAX_BRIGHTNESS;
 80002d4:	4b31      	ldr	r3, [pc, #196]	@ (800039c <PWM_Init+0x110>)
 80002d6:	2263      	movs	r2, #99	@ 0x63
 80002d8:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002da:	4b30      	ldr	r3, [pc, #192]	@ (800039c <PWM_Init+0x110>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Init(&htim2);
 80002e0:	482e      	ldr	r0, [pc, #184]	@ (800039c <PWM_Init+0x110>)
 80002e2:	f001 f88d 	bl	8001400 <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002e6:	2360      	movs	r3, #96	@ 0x60
 80002e8:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = state.led_brightness;
 80002ea:	4b2d      	ldr	r3, [pc, #180]	@ (80003a0 <PWM_Init+0x114>)
 80002ec:	7b1b      	ldrb	r3, [r3, #12]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]

    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2200      	movs	r2, #0
 8000300:	4619      	mov	r1, r3
 8000302:	4826      	ldr	r0, [pc, #152]	@ (800039c <PWM_Init+0x110>)
 8000304:	f001 f9ea 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	2204      	movs	r2, #4
 800030e:	4619      	mov	r1, r3
 8000310:	4822      	ldr	r0, [pc, #136]	@ (800039c <PWM_Init+0x110>)
 8000312:	f001 f9e3 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000316:	2100      	movs	r1, #0
 8000318:	4820      	ldr	r0, [pc, #128]	@ (800039c <PWM_Init+0x110>)
 800031a:	f001 f8d3 	bl	80014c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800031e:	2104      	movs	r1, #4
 8000320:	481e      	ldr	r0, [pc, #120]	@ (800039c <PWM_Init+0x110>)
 8000322:	f001 f8cf 	bl	80014c4 <HAL_TIM_PWM_Start>

    __HAL_RCC_TIM3_CLK_ENABLE();
 8000326:	4b1c      	ldr	r3, [pc, #112]	@ (8000398 <PWM_Init+0x10c>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <PWM_Init+0x10c>)
 800032c:	f043 0302 	orr.w	r3, r3, #2
 8000330:	61d3      	str	r3, [r2, #28]
 8000332:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <PWM_Init+0x10c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
    htim3.Instance = TIM3;
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <PWM_Init+0x118>)
 8000340:	4a19      	ldr	r2, [pc, #100]	@ (80003a8 <PWM_Init+0x11c>)
 8000342:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 1599;
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <PWM_Init+0x118>)
 8000346:	f240 623f 	movw	r2, #1599	@ 0x63f
 800034a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034c:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <PWM_Init+0x118>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = MAX_BRIGHTNESS;
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <PWM_Init+0x118>)
 8000354:	2263      	movs	r2, #99	@ 0x63
 8000356:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <PWM_Init+0x118>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Init(&htim3);
 800035e:	4811      	ldr	r0, [pc, #68]	@ (80003a4 <PWM_Init+0x118>)
 8000360:	f001 f84e 	bl	8001400 <HAL_TIM_PWM_Init>

    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	2204      	movs	r2, #4
 800036a:	4619      	mov	r1, r3
 800036c:	480d      	ldr	r0, [pc, #52]	@ (80003a4 <PWM_Init+0x118>)
 800036e:	f001 f9b5 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	2208      	movs	r2, #8
 8000378:	4619      	mov	r1, r3
 800037a:	480a      	ldr	r0, [pc, #40]	@ (80003a4 <PWM_Init+0x118>)
 800037c:	f001 f9ae 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000380:	2104      	movs	r1, #4
 8000382:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <PWM_Init+0x118>)
 8000384:	f001 f89e 	bl	80014c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000388:	2108      	movs	r1, #8
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <PWM_Init+0x118>)
 800038c:	f001 f89a 	bl	80014c4 <HAL_TIM_PWM_Start>
}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	@ 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	200000c0 	.word	0x200000c0
 80003a0:	20000000 	.word	0x20000000
 80003a4:	2000010c 	.word	0x2000010c
 80003a8:	40000400 	.word	0x40000400

080003ac <Update_LEDs>:

void Update_LEDs(void) {
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
    uint32_t led_mask = state.button_press_count % 16;
 80003b2:	4b21      	ldr	r3, [pc, #132]	@ (8000438 <Update_LEDs+0x8c>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (led_mask & 0x01) ? state.led_brightness : 0);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d004      	beq.n	80003d0 <Update_LEDs+0x24>
 80003c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000438 <Update_LEDs+0x8c>)
 80003c8:	7b1b      	ldrb	r3, [r3, #12]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	e000      	b.n	80003d2 <Update_LEDs+0x26>
 80003d0:	2200      	movs	r2, #0
 80003d2:	4b1a      	ldr	r3, [pc, #104]	@ (800043c <Update_LEDs+0x90>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (led_mask & 0x02) ? state.led_brightness : 0);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d004      	beq.n	80003ec <Update_LEDs+0x40>
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <Update_LEDs+0x8c>)
 80003e4:	7b1b      	ldrb	r3, [r3, #12]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	e000      	b.n	80003ee <Update_LEDs+0x42>
 80003ec:	2200      	movs	r2, #0
 80003ee:	4b13      	ldr	r3, [pc, #76]	@ (800043c <Update_LEDs+0x90>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (led_mask & 0x04) ? state.led_brightness : 0);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f003 0304 	and.w	r3, r3, #4
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d004      	beq.n	8000408 <Update_LEDs+0x5c>
 80003fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <Update_LEDs+0x8c>)
 8000400:	7b1b      	ldrb	r3, [r3, #12]
 8000402:	b2db      	uxtb	r3, r3
 8000404:	461a      	mov	r2, r3
 8000406:	e000      	b.n	800040a <Update_LEDs+0x5e>
 8000408:	2200      	movs	r2, #0
 800040a:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <Update_LEDs+0x94>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (led_mask & 0x08) ? state.led_brightness : 0);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	2b00      	cmp	r3, #0
 8000418:	d004      	beq.n	8000424 <Update_LEDs+0x78>
 800041a:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <Update_LEDs+0x8c>)
 800041c:	7b1b      	ldrb	r3, [r3, #12]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	e000      	b.n	8000426 <Update_LEDs+0x7a>
 8000424:	2200      	movs	r2, #0
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <Update_LEDs+0x94>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	20000000 	.word	0x20000000
 800043c:	200000c0 	.word	0x200000c0
 8000440:	2000010c 	.word	0x2000010c

08000444 <Button_Init>:

void Button_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <Button_Init+0x60>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <Button_Init+0x60>)
 800045e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000462:	6153      	str	r3, [r2, #20]
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <Button_Init+0x60>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000470:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000474:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000476:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800047a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047c:	2301      	movs	r3, #1
 800047e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4808      	ldr	r0, [pc, #32]	@ (80004a8 <Button_Init+0x64>)
 8000486:	f000 fca1 	bl	8000dcc <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	2028      	movs	r0, #40	@ 0x28
 8000490:	f000 fbe9 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000494:	2028      	movs	r0, #40	@ 0x28
 8000496:	f000 fc02 	bl	8000c9e <HAL_NVIC_EnableIRQ>
}
 800049a:	bf00      	nop
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48000800 	.word	0x48000800

080004ac <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 80004b2:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <EXTI15_10_IRQHandler+0x48>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d016      	beq.n	80004ec <EXTI15_10_IRQHandler+0x40>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004c2:	f000 fe0d 	bl	80010e0 <HAL_GPIO_EXTI_IRQHandler>
        uint32_t current_time = HAL_GetTick();
 80004c6:	f000 fae7 	bl	8000a98 <HAL_GetTick>
 80004ca:	6078      	str	r0, [r7, #4]
        if (current_time - state.last_button_press_time > DEBOUNCE_DELAY) {
 80004cc:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <EXTI15_10_IRQHandler+0x4c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80004d6:	d909      	bls.n	80004ec <EXTI15_10_IRQHandler+0x40>
            state.last_button_press_time = current_time;
 80004d8:	4a07      	ldr	r2, [pc, #28]	@ (80004f8 <EXTI15_10_IRQHandler+0x4c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6013      	str	r3, [r2, #0]
            state.button_press_count++;
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <EXTI15_10_IRQHandler+0x4c>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <EXTI15_10_IRQHandler+0x4c>)
 80004e6:	6093      	str	r3, [r2, #8]
            Update_LEDs();
 80004e8:	f7ff ff60 	bl	80003ac <Update_LEDs>
        }
    }
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000000 	.word	0x20000000

080004fc <Timer4_Init>:

void Timer4_Init(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <Timer4_Init+0x64>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <Timer4_Init+0x64>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <Timer4_Init+0x64>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

    htim4.Instance = TIM4;
 800051a:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <Timer4_Init+0x68>)
 800051c:	4a12      	ldr	r2, [pc, #72]	@ (8000568 <Timer4_Init+0x6c>)
 800051e:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 1599;
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <Timer4_Init+0x68>)
 8000522:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000526:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <Timer4_Init+0x68>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = TIMER_PERIOD - 1;
 800052e:	4b0d      	ldr	r3, [pc, #52]	@ (8000564 <Timer4_Init+0x68>)
 8000530:	2209      	movs	r2, #9
 8000532:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <Timer4_Init+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim4);
 800053a:	480a      	ldr	r0, [pc, #40]	@ (8000564 <Timer4_Init+0x68>)
 800053c:	f000 fe98 	bl	8001270 <HAL_TIM_Base_Init>

    HAL_TIM_Base_Start_IT(&htim4);
 8000540:	4808      	ldr	r0, [pc, #32]	@ (8000564 <Timer4_Init+0x68>)
 8000542:	f000 feed 	bl	8001320 <HAL_TIM_Base_Start_IT>

    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2101      	movs	r1, #1
 800054a:	201e      	movs	r0, #30
 800054c:	f000 fb8b 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000550:	201e      	movs	r0, #30
 8000552:	f000 fba4 	bl	8000c9e <HAL_NVIC_EnableIRQ>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	20000158 	.word	0x20000158
 8000568:	40000800 	.word	0x40000800

0800056c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET) {
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <TIM4_IRQHandler+0x2c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b01      	cmp	r3, #1
 800057c:	d107      	bne.n	800058e <TIM4_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <TIM4_IRQHandler+0x2c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f06f 0201 	mvn.w	r2, #1
 8000586:	611a      	str	r2, [r3, #16]
        state.timer_flag = 1;
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <TIM4_IRQHandler+0x30>)
 800058a:	2201      	movs	r2, #1
 800058c:	605a      	str	r2, [r3, #4]
    }
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000158 	.word	0x20000158
 800059c:	20000000 	.word	0x20000000

080005a0 <UART_Init>:

void UART_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <UART_Init+0xb0>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a29      	ldr	r2, [pc, #164]	@ (8000650 <UART_Init+0xb0>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <UART_Init+0xb0>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <UART_Init+0xb0>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a23      	ldr	r2, [pc, #140]	@ (8000650 <UART_Init+0xb0>)
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <UART_Init+0xb0>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80005e6:	230c      	movs	r3, #12
 80005e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005f6:	2307      	movs	r3, #7
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f000 fbe2 	bl	8000dcc <HAL_GPIO_Init>

    huart2.Instance = USART2;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <UART_Init+0xb4>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <UART_Init+0xb8>)
 800060c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 38400;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <UART_Init+0xb4>)
 8000610:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000614:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <UART_Init+0xb4>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <UART_Init+0xb4>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <UART_Init+0xb4>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <UART_Init+0xb4>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <UART_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
    HAL_UART_Init(&huart2);
 8000634:	4807      	ldr	r0, [pc, #28]	@ (8000654 <UART_Init+0xb4>)
 8000636:	f001 fd3a 	bl	80020ae <HAL_UART_Init>

    HAL_UART_Transmit(&huart2, (uint8_t *)"UART Initialized\n", 18, HAL_MAX_DELAY);
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	2212      	movs	r2, #18
 8000640:	4906      	ldr	r1, [pc, #24]	@ (800065c <UART_Init+0xbc>)
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <UART_Init+0xb4>)
 8000644:	f001 fd81 	bl	800214a <HAL_UART_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	20000038 	.word	0x20000038
 8000658:	40004400 	.word	0x40004400
 800065c:	080032d0 	.word	0x080032d0

08000660 <UART_ProcessCommand>:

void UART_ProcessCommand(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
    uint8_t rx_char;
    uint8_t rx_buffer[20];
    uint8_t i = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	77fb      	strb	r3, [r7, #31]

    HAL_UART_Transmit(&huart2, (uint8_t *)"Enter command: ", 15, HAL_MAX_DELAY);
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	220f      	movs	r2, #15
 8000670:	4946      	ldr	r1, [pc, #280]	@ (800078c <UART_ProcessCommand+0x12c>)
 8000672:	4847      	ldr	r0, [pc, #284]	@ (8000790 <UART_ProcessCommand+0x130>)
 8000674:	f001 fd69 	bl	800214a <HAL_UART_Transmit>

    while (1) {

        if (HAL_UART_Receive(&huart2, &rx_char, 1, 100) == HAL_OK) {
 8000678:	f107 0117 	add.w	r1, r7, #23
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4843      	ldr	r0, [pc, #268]	@ (8000790 <UART_ProcessCommand+0x130>)
 8000682:	f001 fdeb 	bl	800225c <HAL_UART_Receive>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f5      	bne.n	8000678 <UART_ProcessCommand+0x18>
            HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 800068c:	f107 0117 	add.w	r1, r7, #23
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2201      	movs	r2, #1
 8000696:	483e      	ldr	r0, [pc, #248]	@ (8000790 <UART_ProcessCommand+0x130>)
 8000698:	f001 fd57 	bl	800214a <HAL_UART_Transmit>
            if (rx_char == '\r' || rx_char == '\n') {
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	2b0d      	cmp	r3, #13
 80006a0:	d002      	beq.n	80006a8 <UART_ProcessCommand+0x48>
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	2b0a      	cmp	r3, #10
 80006a6:	d10a      	bne.n	80006be <UART_ProcessCommand+0x5e>
                rx_buffer[i] = '\0';
 80006a8:	7ffb      	ldrb	r3, [r7, #31]
 80006aa:	3320      	adds	r3, #32
 80006ac:	443b      	add	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	f803 2c20 	strb.w	r2, [r3, #-32]
                break;
 80006b4:	bf00      	nop
                return;
            }
        }
    }

    if (rx_buffer[0] == 'L' || rx_buffer[0] == 'l') {
 80006b6:	783b      	ldrb	r3, [r7, #0]
 80006b8:	2b4c      	cmp	r3, #76	@ 0x4c
 80006ba:	d017      	beq.n	80006ec <UART_ProcessCommand+0x8c>
 80006bc:	e013      	b.n	80006e6 <UART_ProcessCommand+0x86>
            if (i < sizeof(rx_buffer) - 1) {
 80006be:	7ffb      	ldrb	r3, [r7, #31]
 80006c0:	2b12      	cmp	r3, #18
 80006c2:	d808      	bhi.n	80006d6 <UART_ProcessCommand+0x76>
                rx_buffer[i++] = rx_char;
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	77fa      	strb	r2, [r7, #31]
 80006ca:	7dfa      	ldrb	r2, [r7, #23]
 80006cc:	3320      	adds	r3, #32
 80006ce:	443b      	add	r3, r7
 80006d0:	f803 2c20 	strb.w	r2, [r3, #-32]
 80006d4:	e7d0      	b.n	8000678 <UART_ProcessCommand+0x18>
                HAL_UART_Transmit(&huart2, (uint8_t *)"Error: Command too long\n", 23, HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	2217      	movs	r2, #23
 80006dc:	492d      	ldr	r1, [pc, #180]	@ (8000794 <UART_ProcessCommand+0x134>)
 80006de:	482c      	ldr	r0, [pc, #176]	@ (8000790 <UART_ProcessCommand+0x130>)
 80006e0:	f001 fd33 	bl	800214a <HAL_UART_Transmit>
 80006e4:	e04e      	b.n	8000784 <UART_ProcessCommand+0x124>
    if (rx_buffer[0] == 'L' || rx_buffer[0] == 'l') {
 80006e6:	783b      	ldrb	r3, [r7, #0]
 80006e8:	2b6c      	cmp	r3, #108	@ 0x6c
 80006ea:	d144      	bne.n	8000776 <UART_ProcessCommand+0x116>
        if (rx_buffer[1] == '=') {
 80006ec:	787b      	ldrb	r3, [r7, #1]
 80006ee:	2b3d      	cmp	r3, #61	@ 0x3d
 80006f0:	d139      	bne.n	8000766 <UART_ProcessCommand+0x106>
            uint8_t brightness = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	77bb      	strb	r3, [r7, #30]
            int j = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]

            while (rx_buffer[j] >= '0' && rx_buffer[j] <= '9') {
 80006fa:	e010      	b.n	800071e <UART_ProcessCommand+0xbe>
                brightness = brightness * 10 + (rx_buffer[j] - '0');
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	461a      	mov	r2, r3
 8000700:	0092      	lsls	r2, r2, #2
 8000702:	4413      	add	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4639      	mov	r1, r7
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	440b      	add	r3, r1
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4413      	add	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	3b30      	subs	r3, #48	@ 0x30
 8000716:	77bb      	strb	r3, [r7, #30]
                j++;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	3301      	adds	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
            while (rx_buffer[j] >= '0' && rx_buffer[j] <= '9') {
 800071e:	463a      	mov	r2, r7
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b2f      	cmp	r3, #47	@ 0x2f
 8000728:	d905      	bls.n	8000736 <UART_ProcessCommand+0xd6>
 800072a:	463a      	mov	r2, r7
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b39      	cmp	r3, #57	@ 0x39
 8000734:	d9e2      	bls.n	80006fc <UART_ProcessCommand+0x9c>
            }

            if (brightness <= MAX_BRIGHTNESS) {
 8000736:	7fbb      	ldrb	r3, [r7, #30]
 8000738:	2b63      	cmp	r3, #99	@ 0x63
 800073a:	d80c      	bhi.n	8000756 <UART_ProcessCommand+0xf6>
                state.led_brightness = brightness;
 800073c:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <UART_ProcessCommand+0x138>)
 800073e:	7fbb      	ldrb	r3, [r7, #30]
 8000740:	7313      	strb	r3, [r2, #12]
                HAL_UART_Transmit(&huart2, (uint8_t *)"OK\n", 3, HAL_MAX_DELAY);
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2203      	movs	r2, #3
 8000748:	4914      	ldr	r1, [pc, #80]	@ (800079c <UART_ProcessCommand+0x13c>)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <UART_ProcessCommand+0x130>)
 800074c:	f001 fcfd 	bl	800214a <HAL_UART_Transmit>
                Update_LEDs();
 8000750:	f7ff fe2c 	bl	80003ac <Update_LEDs>
        if (rx_buffer[1] == '=') {
 8000754:	e016      	b.n	8000784 <UART_ProcessCommand+0x124>
            } else {
                HAL_UART_Transmit(&huart2, (uint8_t *)"Error: Invalid brightness value\n", 31, HAL_MAX_DELAY);
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	221f      	movs	r2, #31
 800075c:	4910      	ldr	r1, [pc, #64]	@ (80007a0 <UART_ProcessCommand+0x140>)
 800075e:	480c      	ldr	r0, [pc, #48]	@ (8000790 <UART_ProcessCommand+0x130>)
 8000760:	f001 fcf3 	bl	800214a <HAL_UART_Transmit>
        if (rx_buffer[1] == '=') {
 8000764:	e00e      	b.n	8000784 <UART_ProcessCommand+0x124>
            }
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t *)"Error: Invalid command format\n", 30, HAL_MAX_DELAY);
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	221e      	movs	r2, #30
 800076c:	490d      	ldr	r1, [pc, #52]	@ (80007a4 <UART_ProcessCommand+0x144>)
 800076e:	4808      	ldr	r0, [pc, #32]	@ (8000790 <UART_ProcessCommand+0x130>)
 8000770:	f001 fceb 	bl	800214a <HAL_UART_Transmit>
        if (rx_buffer[1] == '=') {
 8000774:	e006      	b.n	8000784 <UART_ProcessCommand+0x124>
        }
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"Error: Invalid command\n", 23, HAL_MAX_DELAY);
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2217      	movs	r2, #23
 800077c:	490a      	ldr	r1, [pc, #40]	@ (80007a8 <UART_ProcessCommand+0x148>)
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <UART_ProcessCommand+0x130>)
 8000780:	f001 fce3 	bl	800214a <HAL_UART_Transmit>
    }
}
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	080032e4 	.word	0x080032e4
 8000790:	20000038 	.word	0x20000038
 8000794:	080032f4 	.word	0x080032f4
 8000798:	20000000 	.word	0x20000000
 800079c:	08003310 	.word	0x08003310
 80007a0:	08003314 	.word	0x08003314
 80007a4:	08003338 	.word	0x08003338
 80007a8:	08003358 	.word	0x08003358

080007ac <main>:

int main(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    HAL_Init();
 80007b0:	f000 f918 	bl	80009e4 <HAL_Init>
    LED_Init();
 80007b4:	f7ff fd0e 	bl	80001d4 <LED_Init>
    Button_Init();
 80007b8:	f7ff fe44 	bl	8000444 <Button_Init>
    UART_Init();
 80007bc:	f7ff fef0 	bl	80005a0 <UART_Init>
    PWM_Init();
 80007c0:	f7ff fd64 	bl	800028c <PWM_Init>
    Timer4_Init();
 80007c4:	f7ff fe9a 	bl	80004fc <Timer4_Init>

    while (1) {
        if (state.timer_flag) {
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <main+0x30>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0fb      	beq.n	80007c8 <main+0x1c>
            state.timer_flag = 0;
 80007d0:	4b02      	ldr	r3, [pc, #8]	@ (80007dc <main+0x30>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
            UART_ProcessCommand();
 80007d6:	f7ff ff43 	bl	8000660 <UART_ProcessCommand>
        if (state.timer_flag) {
 80007da:	e7f5      	b.n	80007c8 <main+0x1c>
 80007dc:	20000000 	.word	0x20000000

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x44>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_MspInit+0x44>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_MspInit+0x44>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000816:	2007      	movs	r0, #7
 8000818:	f000 fa1a 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <HAL_TIM_Base_MspInit+0x44>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d113      	bne.n	8000862 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_TIM_Base_MspInit+0x48>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <HAL_TIM_Base_MspInit+0x48>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <HAL_TIM_Base_MspInit+0x48>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2036      	movs	r0, #54	@ 0x36
 8000858:	f000 fa05 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800085c:	2036      	movs	r0, #54	@ 0x36
 800085e:	f000 fa1e 	bl	8000c9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <HAL_UART_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d128      	bne.n	80008e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_UART_MspInit+0x80>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <HAL_UART_MspInit+0x80>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_UART_MspInit+0x80>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <HAL_UART_MspInit+0x80>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <HAL_UART_MspInit+0x80>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_UART_MspInit+0x80>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f000 fa72 	bl	8000dcc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f88f 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <USART2_IRQHandler+0x10>)
 800095e:	f001 fd47 	bl	80023f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000038 	.word	0x20000038

0800096c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	@ (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000994:	f7ff ffea 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	@ (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f002 fc57 	bl	8003270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c2:	f7ff fef3 	bl	80007ac <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009d4:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 80009d8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009dc:	200001a8 	.word	0x200001a8

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_Init+0x28>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_Init+0x28>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f92b 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f808 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff feee 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x54>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f943 	bl	8000cba <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00e      	b.n	8000a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d80a      	bhi.n	8000a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f90b 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_InitTick+0x5c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000010 	.word	0x20000010
 8000a68:	20000018 	.word	0x20000018
 8000a6c:	20000014 	.word	0x20000014

08000a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000018 	.word	0x20000018
 8000a94:	200001a4 	.word	0x200001a4

08000a98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200001a4 	.word	0x200001a4

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	@ (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	@ 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff29 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff3e 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff31 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e02e      	b.n	8000d42 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d008      	beq.n	8000d00 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e020      	b.n	8000d42 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 020e 	bic.w	r2, r2, #14
 8000d0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d005      	beq.n	8000d70 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2204      	movs	r2, #4
 8000d68:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e027      	b.n	8000dc0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 020e 	bic.w	r2, r2, #14
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	4798      	blx	r3
    }
  }
  return status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	e160      	b.n	800109e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8152 	beq.w	8001098 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x40>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	f003 0201 	and.w	r2, r3, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	6939      	ldr	r1, [r7, #16]
 8000efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0203 	and.w	r2, r3, #3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80ac 	beq.w	8001098 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b5e      	ldr	r3, [pc, #376]	@ (80010bc <HAL_GPIO_Init+0x2f0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a5d      	ldr	r2, [pc, #372]	@ (80010bc <HAL_GPIO_Init+0x2f0>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80010bc <HAL_GPIO_Init+0x2f0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f58:	4a59      	ldr	r2, [pc, #356]	@ (80010c0 <HAL_GPIO_Init+0x2f4>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f82:	d025      	beq.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a4f      	ldr	r2, [pc, #316]	@ (80010c4 <HAL_GPIO_Init+0x2f8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d01f      	beq.n	8000fcc <HAL_GPIO_Init+0x200>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80010c8 <HAL_GPIO_Init+0x2fc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d019      	beq.n	8000fc8 <HAL_GPIO_Init+0x1fc>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4d      	ldr	r2, [pc, #308]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d013      	beq.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4c      	ldr	r2, [pc, #304]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1f4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4b      	ldr	r2, [pc, #300]	@ (80010d4 <HAL_GPIO_Init+0x308>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d007      	beq.n	8000fbc <HAL_GPIO_Init+0x1f0>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4a      	ldr	r2, [pc, #296]	@ (80010d8 <HAL_GPIO_Init+0x30c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_GPIO_Init+0x1ec>
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	e00c      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fb8:	2307      	movs	r3, #7
 8000fba:	e00a      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	e008      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe2:	4937      	ldr	r1, [pc, #220]	@ (80010c0 <HAL_GPIO_Init+0x2f4>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001014:	4a31      	ldr	r2, [pc, #196]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101a:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <HAL_GPIO_Init+0x310>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103e:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001068:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_GPIO_Init+0x310>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001092:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f47f ae97 	bne.w	8000ddc <HAL_GPIO_Init+0x10>
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48000800 	.word	0x48000800
 80010cc:	48000c00 	.word	0x48000c00
 80010d0:	48001000 	.word	0x48001000
 80010d4:	48001400 	.word	0x48001400
 80010d8:	48001800 	.word	0x48001800
 80010dc:	40010400 	.word	0x40010400

080010e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f806 	bl	8001110 <HAL_GPIO_EXTI_Callback>
  }
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d002      	beq.n	8001158 <HAL_RCC_GetSysClockFreq+0x30>
 8001152:	2b08      	cmp	r3, #8
 8001154:	d003      	beq.n	800115e <HAL_RCC_GetSysClockFreq+0x36>
 8001156:	e029      	b.n	80011ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001158:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800115a:	613b      	str	r3, [r7, #16]
      break;
 800115c:	e029      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0c9b      	lsrs	r3, r3, #18
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800116c:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800116e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	4a15      	ldr	r2, [pc, #84]	@ (80011cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001184:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	fbb2 f2f3 	udiv	r2, r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e007      	b.n	80011a6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001196:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	fbb2 f2f3 	udiv	r2, r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	613b      	str	r3, [r7, #16]
      break;
 80011aa:	e002      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011ae:	613b      	str	r3, [r7, #16]
      break;
 80011b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011b2:	693b      	ldr	r3, [r7, #16]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	007a1200 	.word	0x007a1200
 80011c8:	08003378 	.word	0x08003378
 80011cc:	08003388 	.word	0x08003388

080011d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000010 	.word	0x20000010

080011e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80011ee:	f7ff ffef 	bl	80011d0 <HAL_RCC_GetHCLKFreq>
 80011f2:	4601      	mov	r1, r0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80011fc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001200:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	fa92 f2a2 	rbit	r2, r2
 8001208:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	fab2 f282 	clz	r2, r2
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	40d3      	lsrs	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001216:	5cd3      	ldrb	r3, [r2, r3]
 8001218:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	08003370 	.word	0x08003370

0800122c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001232:	f7ff ffcd 	bl	80011d0 <HAL_RCC_GetHCLKFreq>
 8001236:	4601      	mov	r1, r0
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001240:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	fa92 f2a2 	rbit	r2, r2
 800124c:	603a      	str	r2, [r7, #0]
  return result;
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	fab2 f282 	clz	r2, r2
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	40d3      	lsrs	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_RCC_GetPCLK2Freq+0x40>)
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	08003370 	.word	0x08003370

08001270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e049      	b.n	8001316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fac6 	bl	8000828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2202      	movs	r2, #2
 80012a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3304      	adds	r3, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f000 fb28 	bl	8001904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d001      	beq.n	8001338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e04f      	b.n	80013d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01d      	beq.n	8001396 <HAL_TIM_Base_Start_IT+0x76>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001362:	d018      	beq.n	8001396 <HAL_TIM_Base_Start_IT+0x76>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_TIM_Base_Start_IT+0x76>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_TIM_Base_Start_IT+0xcc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00e      	beq.n	8001396 <HAL_TIM_Base_Start_IT+0x76>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d009      	beq.n	8001396 <HAL_TIM_Base_Start_IT+0x76>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d004      	beq.n	8001396 <HAL_TIM_Base_Start_IT+0x76>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d115      	bne.n	80013c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <HAL_TIM_Base_Start_IT+0xdc>)
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	d015      	beq.n	80013d4 <HAL_TIM_Base_Start_IT+0xb4>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ae:	d011      	beq.n	80013d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013c0:	e008      	b.n	80013d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0201 	orr.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e000      	b.n	80013d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40000800 	.word	0x40000800
 80013f0:	40013400 	.word	0x40013400
 80013f4:	40014000 	.word	0x40014000
 80013f8:	40015000 	.word	0x40015000
 80013fc:	00010007 	.word	0x00010007

08001400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e049      	b.n	80014a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f841 	bl	80014ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3304      	adds	r3, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 fa60 	bl	8001904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_TIM_PWM_Start+0x24>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e03c      	b.n	8001562 <HAL_TIM_PWM_Start+0x9e>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d109      	bne.n	8001502 <HAL_TIM_PWM_Start+0x3e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	bf14      	ite	ne
 80014fa:	2301      	movne	r3, #1
 80014fc:	2300      	moveq	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	e02f      	b.n	8001562 <HAL_TIM_PWM_Start+0x9e>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d109      	bne.n	800151c <HAL_TIM_PWM_Start+0x58>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	e022      	b.n	8001562 <HAL_TIM_PWM_Start+0x9e>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d109      	bne.n	8001536 <HAL_TIM_PWM_Start+0x72>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	e015      	b.n	8001562 <HAL_TIM_PWM_Start+0x9e>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b10      	cmp	r3, #16
 800153a:	d109      	bne.n	8001550 <HAL_TIM_PWM_Start+0x8c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	e008      	b.n	8001562 <HAL_TIM_PWM_Start+0x9e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0a1      	b.n	80016ae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d104      	bne.n	800157a <HAL_TIM_PWM_Start+0xb6>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001578:	e023      	b.n	80015c2 <HAL_TIM_PWM_Start+0xfe>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d104      	bne.n	800158a <HAL_TIM_PWM_Start+0xc6>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001588:	e01b      	b.n	80015c2 <HAL_TIM_PWM_Start+0xfe>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d104      	bne.n	800159a <HAL_TIM_PWM_Start+0xd6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001598:	e013      	b.n	80015c2 <HAL_TIM_PWM_Start+0xfe>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	d104      	bne.n	80015aa <HAL_TIM_PWM_Start+0xe6>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80015a8:	e00b      	b.n	80015c2 <HAL_TIM_PWM_Start+0xfe>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d104      	bne.n	80015ba <HAL_TIM_PWM_Start+0xf6>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015b8:	e003      	b.n	80015c2 <HAL_TIM_PWM_Start+0xfe>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fd4a 	bl	8002064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a38      	ldr	r2, [pc, #224]	@ (80016b8 <HAL_TIM_PWM_Start+0x1f4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d018      	beq.n	800160c <HAL_TIM_PWM_Start+0x148>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a37      	ldr	r2, [pc, #220]	@ (80016bc <HAL_TIM_PWM_Start+0x1f8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d013      	beq.n	800160c <HAL_TIM_PWM_Start+0x148>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a35      	ldr	r2, [pc, #212]	@ (80016c0 <HAL_TIM_PWM_Start+0x1fc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00e      	beq.n	800160c <HAL_TIM_PWM_Start+0x148>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a34      	ldr	r2, [pc, #208]	@ (80016c4 <HAL_TIM_PWM_Start+0x200>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d009      	beq.n	800160c <HAL_TIM_PWM_Start+0x148>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a32      	ldr	r2, [pc, #200]	@ (80016c8 <HAL_TIM_PWM_Start+0x204>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d004      	beq.n	800160c <HAL_TIM_PWM_Start+0x148>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a31      	ldr	r2, [pc, #196]	@ (80016cc <HAL_TIM_PWM_Start+0x208>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_TIM_PWM_Start+0x14c>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_TIM_PWM_Start+0x14e>
 8001610:	2300      	movs	r3, #0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <HAL_TIM_PWM_Start+0x1f4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d01d      	beq.n	800166c <HAL_TIM_PWM_Start+0x1a8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001638:	d018      	beq.n	800166c <HAL_TIM_PWM_Start+0x1a8>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a24      	ldr	r2, [pc, #144]	@ (80016d0 <HAL_TIM_PWM_Start+0x20c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d013      	beq.n	800166c <HAL_TIM_PWM_Start+0x1a8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a22      	ldr	r2, [pc, #136]	@ (80016d4 <HAL_TIM_PWM_Start+0x210>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00e      	beq.n	800166c <HAL_TIM_PWM_Start+0x1a8>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1a      	ldr	r2, [pc, #104]	@ (80016bc <HAL_TIM_PWM_Start+0x1f8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d009      	beq.n	800166c <HAL_TIM_PWM_Start+0x1a8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_TIM_PWM_Start+0x1fc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d004      	beq.n	800166c <HAL_TIM_PWM_Start+0x1a8>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a19      	ldr	r2, [pc, #100]	@ (80016cc <HAL_TIM_PWM_Start+0x208>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d115      	bne.n	8001698 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_TIM_PWM_Start+0x214>)
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d015      	beq.n	80016aa <HAL_TIM_PWM_Start+0x1e6>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001684:	d011      	beq.n	80016aa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001696:	e008      	b.n	80016aa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e000      	b.n	80016ac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40013400 	.word	0x40013400
 80016c0:	40014000 	.word	0x40014000
 80016c4:	40014400 	.word	0x40014400
 80016c8:	40014800 	.word	0x40014800
 80016cc:	40015000 	.word	0x40015000
 80016d0:	40000400 	.word	0x40000400
 80016d4:	40000800 	.word	0x40000800
 80016d8:	00010007 	.word	0x00010007

080016dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e0ff      	b.n	80018fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b14      	cmp	r3, #20
 8001706:	f200 80f0 	bhi.w	80018ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800170a:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001765 	.word	0x08001765
 8001714:	080018eb 	.word	0x080018eb
 8001718:	080018eb 	.word	0x080018eb
 800171c:	080018eb 	.word	0x080018eb
 8001720:	080017a5 	.word	0x080017a5
 8001724:	080018eb 	.word	0x080018eb
 8001728:	080018eb 	.word	0x080018eb
 800172c:	080018eb 	.word	0x080018eb
 8001730:	080017e7 	.word	0x080017e7
 8001734:	080018eb 	.word	0x080018eb
 8001738:	080018eb 	.word	0x080018eb
 800173c:	080018eb 	.word	0x080018eb
 8001740:	08001827 	.word	0x08001827
 8001744:	080018eb 	.word	0x080018eb
 8001748:	080018eb 	.word	0x080018eb
 800174c:	080018eb 	.word	0x080018eb
 8001750:	08001869 	.word	0x08001869
 8001754:	080018eb 	.word	0x080018eb
 8001758:	080018eb 	.word	0x080018eb
 800175c:	080018eb 	.word	0x080018eb
 8001760:	080018a9 	.word	0x080018a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f974 	bl	8001a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0208 	orr.w	r2, r2, #8
 800177e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699a      	ldr	r2, [r3, #24]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0204 	bic.w	r2, r2, #4
 800178e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6999      	ldr	r1, [r3, #24]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	619a      	str	r2, [r3, #24]
      break;
 80017a2:	e0a5      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f9ee 	bl	8001b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6999      	ldr	r1, [r3, #24]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	021a      	lsls	r2, r3, #8
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	619a      	str	r2, [r3, #24]
      break;
 80017e4:	e084      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fa61 	bl	8001cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0208 	orr.w	r2, r2, #8
 8001800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0204 	bic.w	r2, r2, #4
 8001810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69d9      	ldr	r1, [r3, #28]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	61da      	str	r2, [r3, #28]
      break;
 8001824:	e064      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fad3 	bl	8001dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69d9      	ldr	r1, [r3, #28]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	61da      	str	r2, [r3, #28]
      break;
 8001866:	e043      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fb22 	bl	8001eb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0208 	orr.w	r2, r2, #8
 8001882:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0204 	bic.w	r2, r2, #4
 8001892:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80018a6:	e023      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fb6c 	bl	8001f8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	021a      	lsls	r2, r3, #8
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80018e8:	e002      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
      break;
 80018ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop

08001904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a48      	ldr	r2, [pc, #288]	@ (8001a38 <TIM_Base_SetConfig+0x134>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d013      	beq.n	8001944 <TIM_Base_SetConfig+0x40>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001922:	d00f      	beq.n	8001944 <TIM_Base_SetConfig+0x40>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a45      	ldr	r2, [pc, #276]	@ (8001a3c <TIM_Base_SetConfig+0x138>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00b      	beq.n	8001944 <TIM_Base_SetConfig+0x40>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a44      	ldr	r2, [pc, #272]	@ (8001a40 <TIM_Base_SetConfig+0x13c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <TIM_Base_SetConfig+0x40>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a43      	ldr	r2, [pc, #268]	@ (8001a44 <TIM_Base_SetConfig+0x140>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <TIM_Base_SetConfig+0x40>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a42      	ldr	r2, [pc, #264]	@ (8001a48 <TIM_Base_SetConfig+0x144>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d108      	bne.n	8001956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800194a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a37      	ldr	r2, [pc, #220]	@ (8001a38 <TIM_Base_SetConfig+0x134>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001964:	d01b      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a34      	ldr	r2, [pc, #208]	@ (8001a3c <TIM_Base_SetConfig+0x138>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d017      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a33      	ldr	r2, [pc, #204]	@ (8001a40 <TIM_Base_SetConfig+0x13c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a32      	ldr	r2, [pc, #200]	@ (8001a44 <TIM_Base_SetConfig+0x140>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00f      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <TIM_Base_SetConfig+0x148>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00b      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a31      	ldr	r2, [pc, #196]	@ (8001a50 <TIM_Base_SetConfig+0x14c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a30      	ldr	r2, [pc, #192]	@ (8001a54 <TIM_Base_SetConfig+0x150>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d003      	beq.n	800199e <TIM_Base_SetConfig+0x9a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a2b      	ldr	r2, [pc, #172]	@ (8001a48 <TIM_Base_SetConfig+0x144>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d108      	bne.n	80019b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <TIM_Base_SetConfig+0x134>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <TIM_Base_SetConfig+0x100>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a19      	ldr	r2, [pc, #100]	@ (8001a44 <TIM_Base_SetConfig+0x140>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00f      	beq.n	8001a04 <TIM_Base_SetConfig+0x100>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <TIM_Base_SetConfig+0x148>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00b      	beq.n	8001a04 <TIM_Base_SetConfig+0x100>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a18      	ldr	r2, [pc, #96]	@ (8001a50 <TIM_Base_SetConfig+0x14c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <TIM_Base_SetConfig+0x100>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <TIM_Base_SetConfig+0x150>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d003      	beq.n	8001a04 <TIM_Base_SetConfig+0x100>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <TIM_Base_SetConfig+0x144>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d103      	bne.n	8001a0c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f023 0201 	bic.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40013400 	.word	0x40013400
 8001a48:	40015000 	.word	0x40015000
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40014400 	.word	0x40014400
 8001a54:	40014800 	.word	0x40014800

08001a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f023 0201 	bic.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a30      	ldr	r2, [pc, #192]	@ (8001b74 <TIM_OC1_SetConfig+0x11c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d013      	beq.n	8001ae0 <TIM_OC1_SetConfig+0x88>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a2f      	ldr	r2, [pc, #188]	@ (8001b78 <TIM_OC1_SetConfig+0x120>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00f      	beq.n	8001ae0 <TIM_OC1_SetConfig+0x88>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8001b7c <TIM_OC1_SetConfig+0x124>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00b      	beq.n	8001ae0 <TIM_OC1_SetConfig+0x88>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a2d      	ldr	r2, [pc, #180]	@ (8001b80 <TIM_OC1_SetConfig+0x128>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <TIM_OC1_SetConfig+0x88>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b84 <TIM_OC1_SetConfig+0x12c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <TIM_OC1_SetConfig+0x88>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a2b      	ldr	r2, [pc, #172]	@ (8001b88 <TIM_OC1_SetConfig+0x130>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d10c      	bne.n	8001afa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f023 0308 	bic.w	r3, r3, #8
 8001ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <TIM_OC1_SetConfig+0x11c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <TIM_OC1_SetConfig+0xd2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	@ (8001b78 <TIM_OC1_SetConfig+0x120>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00f      	beq.n	8001b2a <TIM_OC1_SetConfig+0xd2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b7c <TIM_OC1_SetConfig+0x124>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <TIM_OC1_SetConfig+0xd2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1a      	ldr	r2, [pc, #104]	@ (8001b80 <TIM_OC1_SetConfig+0x128>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <TIM_OC1_SetConfig+0xd2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <TIM_OC1_SetConfig+0x12c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_OC1_SetConfig+0xd2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <TIM_OC1_SetConfig+0x130>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d111      	bne.n	8001b4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	621a      	str	r2, [r3, #32]
}
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40012c00 	.word	0x40012c00
 8001b78:	40013400 	.word	0x40013400
 8001b7c:	40014000 	.word	0x40014000
 8001b80:	40014400 	.word	0x40014400
 8001b84:	40014800 	.word	0x40014800
 8001b88:	40015000 	.word	0x40015000

08001b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f023 0210 	bic.w	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f023 0320 	bic.w	r3, r3, #32
 8001bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a2c      	ldr	r2, [pc, #176]	@ (8001c9c <TIM_OC2_SetConfig+0x110>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <TIM_OC2_SetConfig+0x74>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <TIM_OC2_SetConfig+0x114>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d003      	beq.n	8001c00 <TIM_OC2_SetConfig+0x74>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <TIM_OC2_SetConfig+0x118>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d10d      	bne.n	8001c1c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <TIM_OC2_SetConfig+0x110>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <TIM_OC2_SetConfig+0xc0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca0 <TIM_OC2_SetConfig+0x114>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00f      	beq.n	8001c4c <TIM_OC2_SetConfig+0xc0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <TIM_OC2_SetConfig+0x11c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00b      	beq.n	8001c4c <TIM_OC2_SetConfig+0xc0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <TIM_OC2_SetConfig+0x120>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <TIM_OC2_SetConfig+0xc0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <TIM_OC2_SetConfig+0x124>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d003      	beq.n	8001c4c <TIM_OC2_SetConfig+0xc0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a17      	ldr	r2, [pc, #92]	@ (8001ca4 <TIM_OC2_SetConfig+0x118>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d113      	bne.n	8001c74 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c52:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c5a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	621a      	str	r2, [r3, #32]
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40013400 	.word	0x40013400
 8001ca4:	40015000 	.word	0x40015000
 8001ca8:	40014000 	.word	0x40014000
 8001cac:	40014400 	.word	0x40014400
 8001cb0:	40014800 	.word	0x40014800

08001cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc0 <TIM_OC3_SetConfig+0x10c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <TIM_OC3_SetConfig+0x72>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc4 <TIM_OC3_SetConfig+0x110>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <TIM_OC3_SetConfig+0x72>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a29      	ldr	r2, [pc, #164]	@ (8001dc8 <TIM_OC3_SetConfig+0x114>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10d      	bne.n	8001d42 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d40:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <TIM_OC3_SetConfig+0x10c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_OC3_SetConfig+0xbe>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <TIM_OC3_SetConfig+0x110>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_OC3_SetConfig+0xbe>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <TIM_OC3_SetConfig+0x118>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_OC3_SetConfig+0xbe>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <TIM_OC3_SetConfig+0x11c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_OC3_SetConfig+0xbe>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <TIM_OC3_SetConfig+0x120>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_OC3_SetConfig+0xbe>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <TIM_OC3_SetConfig+0x114>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d113      	bne.n	8001d9a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	621a      	str	r2, [r3, #32]
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012c00 	.word	0x40012c00
 8001dc4:	40013400 	.word	0x40013400
 8001dc8:	40015000 	.word	0x40015000
 8001dcc:	40014000 	.word	0x40014000
 8001dd0:	40014400 	.word	0x40014400
 8001dd4:	40014800 	.word	0x40014800

08001dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	031b      	lsls	r3, r3, #12
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea0 <TIM_OC4_SetConfig+0xc8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <TIM_OC4_SetConfig+0x8c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ea4 <TIM_OC4_SetConfig+0xcc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00f      	beq.n	8001e64 <TIM_OC4_SetConfig+0x8c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <TIM_OC4_SetConfig+0xd0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00b      	beq.n	8001e64 <TIM_OC4_SetConfig+0x8c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <TIM_OC4_SetConfig+0xd4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <TIM_OC4_SetConfig+0x8c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <TIM_OC4_SetConfig+0xd8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <TIM_OC4_SetConfig+0x8c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a15      	ldr	r2, [pc, #84]	@ (8001eb4 <TIM_OC4_SetConfig+0xdc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d109      	bne.n	8001e78 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	621a      	str	r2, [r3, #32]
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40013400 	.word	0x40013400
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800
 8001eb4:	40015000 	.word	0x40015000

08001eb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <TIM_OC5_SetConfig+0xbc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <TIM_OC5_SetConfig+0x82>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <TIM_OC5_SetConfig+0xc0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00f      	beq.n	8001f3a <TIM_OC5_SetConfig+0x82>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <TIM_OC5_SetConfig+0xc4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00b      	beq.n	8001f3a <TIM_OC5_SetConfig+0x82>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <TIM_OC5_SetConfig+0xc8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <TIM_OC5_SetConfig+0x82>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a15      	ldr	r2, [pc, #84]	@ (8001f84 <TIM_OC5_SetConfig+0xcc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d003      	beq.n	8001f3a <TIM_OC5_SetConfig+0x82>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <TIM_OC5_SetConfig+0xd0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d109      	bne.n	8001f4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	621a      	str	r2, [r3, #32]
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	40013400 	.word	0x40013400
 8001f7c:	40014000 	.word	0x40014000
 8001f80:	40014400 	.word	0x40014400
 8001f84:	40014800 	.word	0x40014800
 8001f88:	40015000 	.word	0x40015000

08001f8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	051b      	lsls	r3, r3, #20
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800204c <TIM_OC6_SetConfig+0xc0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <TIM_OC6_SetConfig+0x84>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a19      	ldr	r2, [pc, #100]	@ (8002050 <TIM_OC6_SetConfig+0xc4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00f      	beq.n	8002010 <TIM_OC6_SetConfig+0x84>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <TIM_OC6_SetConfig+0xc8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <TIM_OC6_SetConfig+0x84>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <TIM_OC6_SetConfig+0xcc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <TIM_OC6_SetConfig+0x84>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a16      	ldr	r2, [pc, #88]	@ (800205c <TIM_OC6_SetConfig+0xd0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <TIM_OC6_SetConfig+0x84>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a15      	ldr	r2, [pc, #84]	@ (8002060 <TIM_OC6_SetConfig+0xd4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d109      	bne.n	8002024 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	621a      	str	r2, [r3, #32]
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40013400 	.word	0x40013400
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	40015000 	.word	0x40015000

08002064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2201      	movs	r2, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	621a      	str	r2, [r3, #32]
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e040      	b.n	8002142 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe fbcf 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2224      	movs	r2, #36	@ 0x24
 80020da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fe55 	bl	8002da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fc7e 	bl	80029fc <UART_SetConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e01b      	b.n	8002142 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002118:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002128:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fed4 	bl	8002ee8 <UART_CheckIdleState>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b08a      	sub	sp, #40	@ 0x28
 800214e:	af02      	add	r7, sp, #8
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800215e:	2b20      	cmp	r3, #32
 8002160:	d177      	bne.n	8002252 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_UART_Transmit+0x24>
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e070      	b.n	8002254 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2221      	movs	r2, #33	@ 0x21
 800217e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002180:	f7fe fc8a 	bl	8000a98 <HAL_GetTick>
 8002184:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219e:	d108      	bne.n	80021b2 <HAL_UART_Transmit+0x68>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	e003      	b.n	80021ba <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021ba:	e02f      	b.n	800221c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2180      	movs	r1, #128	@ 0x80
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 ff36 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e03b      	b.n	8002254 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	881a      	ldrh	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ee:	b292      	uxth	r2, r2
 80021f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3302      	adds	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e007      	b.n	800220a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1c9      	bne.n	80021bc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2200      	movs	r2, #0
 8002230:	2140      	movs	r1, #64	@ 0x40
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 ff00 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e005      	b.n	8002254 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002252:	2302      	movs	r3, #2
  }
}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002272:	2b20      	cmp	r3, #32
 8002274:	f040 80b6 	bne.w	80023e4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_UART_Receive+0x28>
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0ae      	b.n	80023e6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2222      	movs	r2, #34	@ 0x22
 8002294:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800229e:	f7fe fbfb 	bl	8000a98 <HAL_GetTick>
 80022a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	88fa      	ldrh	r2, [r7, #6]
 80022a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022bc:	d10e      	bne.n	80022dc <HAL_UART_Receive+0x80>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_UART_Receive+0x76>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80022cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022d0:	e02d      	b.n	800232e <HAL_UART_Receive+0xd2>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	@ 0xff
 80022d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022da:	e028      	b.n	800232e <HAL_UART_Receive+0xd2>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_UART_Receive+0xa4>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <HAL_UART_Receive+0x9a>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	22ff      	movs	r2, #255	@ 0xff
 80022f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022f4:	e01b      	b.n	800232e <HAL_UART_Receive+0xd2>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	227f      	movs	r2, #127	@ 0x7f
 80022fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022fe:	e016      	b.n	800232e <HAL_UART_Receive+0xd2>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002308:	d10d      	bne.n	8002326 <HAL_UART_Receive+0xca>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <HAL_UART_Receive+0xc0>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	227f      	movs	r2, #127	@ 0x7f
 8002316:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800231a:	e008      	b.n	800232e <HAL_UART_Receive+0xd2>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	223f      	movs	r2, #63	@ 0x3f
 8002320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002324:	e003      	b.n	800232e <HAL_UART_Receive+0xd2>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002334:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800233e:	d108      	bne.n	8002352 <HAL_UART_Receive+0xf6>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	e003      	b.n	800235a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800235a:	e037      	b.n	80023cc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	2120      	movs	r1, #32
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fe66 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e033      	b.n	80023e6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10c      	bne.n	800239e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800238a:	b29a      	uxth	r2, r3
 800238c:	8a7b      	ldrh	r3, [r7, #18]
 800238e:	4013      	ands	r3, r2
 8002390:	b29a      	uxth	r2, r3
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3302      	adds	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	e00d      	b.n	80023ba <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	8a7b      	ldrh	r3, [r7, #18]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4013      	ands	r3, r2
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1c1      	bne.n	800235c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0ba      	sub	sp, #232	@ 0xe8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002416:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800241a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800241e:	4013      	ands	r3, r2
 8002420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d115      	bne.n	8002458 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800242c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00f      	beq.n	8002458 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 82ab 	beq.w	80029a4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
      }
      return;
 8002456:	e2a5      	b.n	80029a4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8117 	beq.w	8002690 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800246e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002472:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <HAL_UART_IRQHandler+0x298>)
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 810a 	beq.w	8002690 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800247c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d011      	beq.n	80024ac <HAL_UART_IRQHandler+0xbc>
 8002488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d011      	beq.n	80024dc <HAL_UART_IRQHandler+0xec>
 80024b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2202      	movs	r2, #2
 80024ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d011      	beq.n	800250c <HAL_UART_IRQHandler+0x11c>
 80024e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2204      	movs	r2, #4
 80024fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800250c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d017      	beq.n	8002548 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002528:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800253e:	f043 0208 	orr.w	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_UART_IRQHandler+0x18a>
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002558:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8211 	beq.w	80029a8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	2b40      	cmp	r3, #64	@ 0x40
 80025c4:	d005      	beq.n	80025d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d04f      	beq.n	8002672 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fd9d 	bl	8003112 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e2:	2b40      	cmp	r3, #64	@ 0x40
 80025e4:	d141      	bne.n	800266a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3308      	adds	r3, #8
 80025ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3308      	adds	r3, #8
 800260e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002612:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800261e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800262a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1d9      	bne.n	80025e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002636:	2b00      	cmp	r3, #0
 8002638:	d013      	beq.n	8002662 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_UART_IRQHandler+0x29c>)
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb81 	bl	8000d4e <HAL_DMA_Abort_IT>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d017      	beq.n	8002682 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800265c:	4610      	mov	r0, r2
 800265e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	e00f      	b.n	8002682 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9b4 	bl	80029d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	e00b      	b.n	8002682 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9b0 	bl	80029d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	e007      	b.n	8002682 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9ac 	bl	80029d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002680:	e192      	b.n	80029a8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002682:	bf00      	nop
    return;
 8002684:	e190      	b.n	80029a8 <HAL_UART_IRQHandler+0x5b8>
 8002686:	bf00      	nop
 8002688:	04000120 	.word	0x04000120
 800268c:	080031db 	.word	0x080031db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 814b 	bne.w	8002930 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8144 	beq.w	8002930 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 813d 	beq.w	8002930 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c8:	2b40      	cmp	r3, #64	@ 0x40
 80026ca:	f040 80b5 	bne.w	8002838 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8164 	beq.w	80029ac <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80026ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026ee:	429a      	cmp	r2, r3
 80026f0:	f080 815c 	bcs.w	80029ac <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b20      	cmp	r3, #32
 8002706:	f000 8086 	beq.w	8002816 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800271e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002722:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002726:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002734:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002738:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002740:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002744:	e841 2300 	strex	r3, r2, [r1]
 8002748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1da      	bne.n	800270a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3308      	adds	r3, #8
 800275a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3308      	adds	r3, #8
 8002774:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002778:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800277c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002780:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800278a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e1      	bne.n	8002754 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3308      	adds	r3, #8
 8002796:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3308      	adds	r3, #8
 80027b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027bc:	e841 2300 	strex	r3, r2, [r1]
 80027c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e3      	bne.n	8002790 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e6:	f023 0310 	bic.w	r3, r3, #16
 80027ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e4      	bne.n	80027d6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fa5e 	bl	8000cd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002828:	b29b      	uxth	r3, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b29b      	uxth	r3, r3
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8d7 	bl	80029e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002836:	e0b9      	b.n	80029ac <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002844:	b29b      	uxth	r3, r3
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ab 	beq.w	80029b0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800285a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80a6 	beq.w	80029b0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002886:	647b      	str	r3, [r7, #68]	@ 0x44
 8002888:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800288c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800288e:	e841 2300 	strex	r3, r2, [r1]
 8002892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e4      	bne.n	8002864 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3308      	adds	r3, #8
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	e853 3f00 	ldrex	r3, [r3]
 80028a8:	623b      	str	r3, [r7, #32]
   return(result);
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3308      	adds	r3, #8
 80028ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028be:	633a      	str	r2, [r7, #48]	@ 0x30
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e3      	bne.n	800289a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	e853 3f00 	ldrex	r3, [r3]
 80028f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0310 	bic.w	r3, r3, #16
 80028fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	69b9      	ldr	r1, [r7, #24]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	617b      	str	r3, [r7, #20]
   return(result);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e4      	bne.n	80028e6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f85b 	bl	80029e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800292e:	e03f      	b.n	80029b0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <HAL_UART_IRQHandler+0x56a>
 800293c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002950:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fc81 	bl	800325a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002958:	e02d      	b.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00e      	beq.n	8002984 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800296a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01c      	beq.n	80029b4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
    }
    return;
 8002982:	e017      	b.n	80029b4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d012      	beq.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fc32 	bl	8003206 <UART_EndTransmit_IT>
    return;
 80029a2:	e008      	b.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80029a4:	bf00      	nop
 80029a6:	e006      	b.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80029a8:	bf00      	nop
 80029aa:	e004      	b.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80029b4:	bf00      	nop
  }

}
 80029b6:	37e8      	adds	r7, #232	@ 0xe8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b92      	ldr	r3, [pc, #584]	@ (8002c70 <UART_SetConfig+0x274>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a80      	ldr	r2, [pc, #512]	@ (8002c74 <UART_SetConfig+0x278>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d120      	bne.n	8002aba <UART_SetConfig+0xbe>
 8002a78:	4b7f      	ldr	r3, [pc, #508]	@ (8002c78 <UART_SetConfig+0x27c>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d817      	bhi.n	8002ab4 <UART_SetConfig+0xb8>
 8002a84:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <UART_SetConfig+0x90>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa9 	.word	0x08002aa9
 8002a94:	08002aaf 	.word	0x08002aaf
 8002a98:	08002aa3 	.word	0x08002aa3
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e0b5      	b.n	8002c0e <UART_SetConfig+0x212>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	77fb      	strb	r3, [r7, #31]
 8002aa6:	e0b2      	b.n	8002c0e <UART_SetConfig+0x212>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	77fb      	strb	r3, [r7, #31]
 8002aac:	e0af      	b.n	8002c0e <UART_SetConfig+0x212>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	77fb      	strb	r3, [r7, #31]
 8002ab2:	e0ac      	b.n	8002c0e <UART_SetConfig+0x212>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	77fb      	strb	r3, [r7, #31]
 8002ab8:	e0a9      	b.n	8002c0e <UART_SetConfig+0x212>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6f      	ldr	r2, [pc, #444]	@ (8002c7c <UART_SetConfig+0x280>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d124      	bne.n	8002b0e <UART_SetConfig+0x112>
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c78 <UART_SetConfig+0x27c>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002acc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ad0:	d011      	beq.n	8002af6 <UART_SetConfig+0xfa>
 8002ad2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ad6:	d817      	bhi.n	8002b08 <UART_SetConfig+0x10c>
 8002ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002adc:	d011      	beq.n	8002b02 <UART_SetConfig+0x106>
 8002ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ae2:	d811      	bhi.n	8002b08 <UART_SetConfig+0x10c>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <UART_SetConfig+0xf4>
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d006      	beq.n	8002afc <UART_SetConfig+0x100>
 8002aee:	e00b      	b.n	8002b08 <UART_SetConfig+0x10c>
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	e08b      	b.n	8002c0e <UART_SetConfig+0x212>
 8002af6:	2302      	movs	r3, #2
 8002af8:	77fb      	strb	r3, [r7, #31]
 8002afa:	e088      	b.n	8002c0e <UART_SetConfig+0x212>
 8002afc:	2304      	movs	r3, #4
 8002afe:	77fb      	strb	r3, [r7, #31]
 8002b00:	e085      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b02:	2308      	movs	r3, #8
 8002b04:	77fb      	strb	r3, [r7, #31]
 8002b06:	e082      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b08:	2310      	movs	r3, #16
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e07f      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a5b      	ldr	r2, [pc, #364]	@ (8002c80 <UART_SetConfig+0x284>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d124      	bne.n	8002b62 <UART_SetConfig+0x166>
 8002b18:	4b57      	ldr	r3, [pc, #348]	@ (8002c78 <UART_SetConfig+0x27c>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002b20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b24:	d011      	beq.n	8002b4a <UART_SetConfig+0x14e>
 8002b26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b2a:	d817      	bhi.n	8002b5c <UART_SetConfig+0x160>
 8002b2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b30:	d011      	beq.n	8002b56 <UART_SetConfig+0x15a>
 8002b32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b36:	d811      	bhi.n	8002b5c <UART_SetConfig+0x160>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <UART_SetConfig+0x148>
 8002b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b40:	d006      	beq.n	8002b50 <UART_SetConfig+0x154>
 8002b42:	e00b      	b.n	8002b5c <UART_SetConfig+0x160>
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e061      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	77fb      	strb	r3, [r7, #31]
 8002b4e:	e05e      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b50:	2304      	movs	r3, #4
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e05b      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b56:	2308      	movs	r3, #8
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e058      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e055      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a47      	ldr	r2, [pc, #284]	@ (8002c84 <UART_SetConfig+0x288>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d124      	bne.n	8002bb6 <UART_SetConfig+0x1ba>
 8002b6c:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <UART_SetConfig+0x27c>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b78:	d011      	beq.n	8002b9e <UART_SetConfig+0x1a2>
 8002b7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b7e:	d817      	bhi.n	8002bb0 <UART_SetConfig+0x1b4>
 8002b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b84:	d011      	beq.n	8002baa <UART_SetConfig+0x1ae>
 8002b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b8a:	d811      	bhi.n	8002bb0 <UART_SetConfig+0x1b4>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <UART_SetConfig+0x19c>
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b94:	d006      	beq.n	8002ba4 <UART_SetConfig+0x1a8>
 8002b96:	e00b      	b.n	8002bb0 <UART_SetConfig+0x1b4>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e037      	b.n	8002c0e <UART_SetConfig+0x212>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	77fb      	strb	r3, [r7, #31]
 8002ba2:	e034      	b.n	8002c0e <UART_SetConfig+0x212>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e031      	b.n	8002c0e <UART_SetConfig+0x212>
 8002baa:	2308      	movs	r3, #8
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	e02e      	b.n	8002c0e <UART_SetConfig+0x212>
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	e02b      	b.n	8002c0e <UART_SetConfig+0x212>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a33      	ldr	r2, [pc, #204]	@ (8002c88 <UART_SetConfig+0x28c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d124      	bne.n	8002c0a <UART_SetConfig+0x20e>
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <UART_SetConfig+0x27c>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002bc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bcc:	d011      	beq.n	8002bf2 <UART_SetConfig+0x1f6>
 8002bce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bd2:	d817      	bhi.n	8002c04 <UART_SetConfig+0x208>
 8002bd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bd8:	d011      	beq.n	8002bfe <UART_SetConfig+0x202>
 8002bda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bde:	d811      	bhi.n	8002c04 <UART_SetConfig+0x208>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <UART_SetConfig+0x1f0>
 8002be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be8:	d006      	beq.n	8002bf8 <UART_SetConfig+0x1fc>
 8002bea:	e00b      	b.n	8002c04 <UART_SetConfig+0x208>
 8002bec:	2300      	movs	r3, #0
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e00d      	b.n	8002c0e <UART_SetConfig+0x212>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	77fb      	strb	r3, [r7, #31]
 8002bf6:	e00a      	b.n	8002c0e <UART_SetConfig+0x212>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e007      	b.n	8002c0e <UART_SetConfig+0x212>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e004      	b.n	8002c0e <UART_SetConfig+0x212>
 8002c04:	2310      	movs	r3, #16
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e001      	b.n	8002c0e <UART_SetConfig+0x212>
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c16:	d16b      	bne.n	8002cf0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002c18:	7ffb      	ldrb	r3, [r7, #31]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d838      	bhi.n	8002c90 <UART_SetConfig+0x294>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <UART_SetConfig+0x228>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08002c51 	.word	0x08002c51
 8002c2c:	08002c59 	.word	0x08002c59
 8002c30:	08002c91 	.word	0x08002c91
 8002c34:	08002c5f 	.word	0x08002c5f
 8002c38:	08002c91 	.word	0x08002c91
 8002c3c:	08002c91 	.word	0x08002c91
 8002c40:	08002c91 	.word	0x08002c91
 8002c44:	08002c67 	.word	0x08002c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c48:	f7fe face 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	61b8      	str	r0, [r7, #24]
        break;
 8002c4e:	e024      	b.n	8002c9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c50:	f7fe faec 	bl	800122c <HAL_RCC_GetPCLK2Freq>
 8002c54:	61b8      	str	r0, [r7, #24]
        break;
 8002c56:	e020      	b.n	8002c9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <UART_SetConfig+0x290>)
 8002c5a:	61bb      	str	r3, [r7, #24]
        break;
 8002c5c:	e01d      	b.n	8002c9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5e:	f7fe fa63 	bl	8001128 <HAL_RCC_GetSysClockFreq>
 8002c62:	61b8      	str	r0, [r7, #24]
        break;
 8002c64:	e019      	b.n	8002c9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c6a:	61bb      	str	r3, [r7, #24]
        break;
 8002c6c:	e015      	b.n	8002c9a <UART_SetConfig+0x29e>
 8002c6e:	bf00      	nop
 8002c70:	efff69f3 	.word	0xefff69f3
 8002c74:	40013800 	.word	0x40013800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40004400 	.word	0x40004400
 8002c80:	40004800 	.word	0x40004800
 8002c84:	40004c00 	.word	0x40004c00
 8002c88:	40005000 	.word	0x40005000
 8002c8c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	77bb      	strb	r3, [r7, #30]
        break;
 8002c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d073      	beq.n	8002d88 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	005a      	lsls	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d916      	bls.n	8002cea <UART_SetConfig+0x2ee>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc2:	d212      	bcs.n	8002cea <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	89fa      	ldrh	r2, [r7, #14]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	e04e      	b.n	8002d88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	77bb      	strb	r3, [r7, #30]
 8002cee:	e04b      	b.n	8002d88 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d827      	bhi.n	8002d46 <UART_SetConfig+0x34a>
 8002cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cfc <UART_SetConfig+0x300>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d21 	.word	0x08002d21
 8002d00:	08002d29 	.word	0x08002d29
 8002d04:	08002d31 	.word	0x08002d31
 8002d08:	08002d47 	.word	0x08002d47
 8002d0c:	08002d37 	.word	0x08002d37
 8002d10:	08002d47 	.word	0x08002d47
 8002d14:	08002d47 	.word	0x08002d47
 8002d18:	08002d47 	.word	0x08002d47
 8002d1c:	08002d3f 	.word	0x08002d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7fe fa62 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
 8002d24:	61b8      	str	r0, [r7, #24]
        break;
 8002d26:	e013      	b.n	8002d50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d28:	f7fe fa80 	bl	800122c <HAL_RCC_GetPCLK2Freq>
 8002d2c:	61b8      	str	r0, [r7, #24]
        break;
 8002d2e:	e00f      	b.n	8002d50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <UART_SetConfig+0x3a4>)
 8002d32:	61bb      	str	r3, [r7, #24]
        break;
 8002d34:	e00c      	b.n	8002d50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d36:	f7fe f9f7 	bl	8001128 <HAL_RCC_GetSysClockFreq>
 8002d3a:	61b8      	str	r0, [r7, #24]
        break;
 8002d3c:	e008      	b.n	8002d50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d42:	61bb      	str	r3, [r7, #24]
        break;
 8002d44:	e004      	b.n	8002d50 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085a      	lsrs	r2, r3, #1
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d909      	bls.n	8002d84 <UART_SetConfig+0x388>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d76:	d205      	bcs.n	8002d84 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	007a1200 	.word	0x007a1200

08002da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01a      	beq.n	8002eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea2:	d10a      	bne.n	8002eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b098      	sub	sp, #96	@ 0x60
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ef8:	f7fd fdce 	bl	8000a98 <HAL_GetTick>
 8002efc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d12e      	bne.n	8002f6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f88c 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d021      	beq.n	8002f6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e6      	bne.n	8002f26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e062      	b.n	8003030 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d149      	bne.n	800300c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f80:	2200      	movs	r2, #0
 8002f82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f856 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03c      	beq.n	800300c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e6      	bne.n	8002f92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fe4:	61fa      	str	r2, [r7, #28]
 8002fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	69b9      	ldr	r1, [r7, #24]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e5      	bne.n	8002fc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e011      	b.n	8003030 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3758      	adds	r7, #88	@ 0x58
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	e04f      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d04b      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fd fd21 	bl	8000a98 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e04e      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d037      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b80      	cmp	r3, #128	@ 0x80
 800307e:	d034      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d031      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d110      	bne.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2208      	movs	r2, #8
 800309a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f838 	bl	8003112 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2208      	movs	r2, #8
 80030a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e029      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030c4:	d111      	bne.n	80030ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f81e 	bl	8003112 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e00f      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d0a0      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003112:	b480      	push	{r7}
 8003114:	b095      	sub	sp, #84	@ 0x54
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800312e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003138:	643b      	str	r3, [r7, #64]	@ 0x40
 800313a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800313e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e6      	bne.n	800311a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3308      	adds	r3, #8
 8003152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	61fb      	str	r3, [r7, #28]
   return(result);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800316c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	2b01      	cmp	r3, #1
 8003186:	d118      	bne.n	80031ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	60bb      	str	r3, [r7, #8]
   return(result);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f023 0310 	bic.w	r3, r3, #16
 800319c:	647b      	str	r3, [r7, #68]	@ 0x44
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	6979      	ldr	r1, [r7, #20]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	613b      	str	r3, [r7, #16]
   return(result);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e6      	bne.n	8003188 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031ce:	bf00      	nop
 80031d0:	3754      	adds	r7, #84	@ 0x54
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fbe9 	bl	80029d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	60bb      	str	r3, [r7, #8]
   return(result);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	613b      	str	r3, [r7, #16]
   return(result);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fbb5 	bl	80029bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003252:	bf00      	nop
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <__libc_init_array>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4d0d      	ldr	r5, [pc, #52]	@ (80032a8 <__libc_init_array+0x38>)
 8003274:	4c0d      	ldr	r4, [pc, #52]	@ (80032ac <__libc_init_array+0x3c>)
 8003276:	1b64      	subs	r4, r4, r5
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	2600      	movs	r6, #0
 800327c:	42a6      	cmp	r6, r4
 800327e:	d109      	bne.n	8003294 <__libc_init_array+0x24>
 8003280:	4d0b      	ldr	r5, [pc, #44]	@ (80032b0 <__libc_init_array+0x40>)
 8003282:	4c0c      	ldr	r4, [pc, #48]	@ (80032b4 <__libc_init_array+0x44>)
 8003284:	f000 f818 	bl	80032b8 <_init>
 8003288:	1b64      	subs	r4, r4, r5
 800328a:	10a4      	asrs	r4, r4, #2
 800328c:	2600      	movs	r6, #0
 800328e:	42a6      	cmp	r6, r4
 8003290:	d105      	bne.n	800329e <__libc_init_array+0x2e>
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	f855 3b04 	ldr.w	r3, [r5], #4
 8003298:	4798      	blx	r3
 800329a:	3601      	adds	r6, #1
 800329c:	e7ee      	b.n	800327c <__libc_init_array+0xc>
 800329e:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a2:	4798      	blx	r3
 80032a4:	3601      	adds	r6, #1
 80032a6:	e7f2      	b.n	800328e <__libc_init_array+0x1e>
 80032a8:	08003398 	.word	0x08003398
 80032ac:	08003398 	.word	0x08003398
 80032b0:	08003398 	.word	0x08003398
 80032b4:	0800339c 	.word	0x0800339c

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
